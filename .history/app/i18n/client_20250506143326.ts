"use client";

import i18next from 'i18next';
import { initReactI18next } from 'react-i18next';
import LanguageDetector from 'i18next-browser-languagedetector';
import HttpBackend from 'i18next-http-backend';
import { getOptions } from './settings';

// Idiomas suportados pelo DeepL
export const SUPPORTED_LANGUAGES = {
  pt: { name: "Portugu√™s", flag: "üáµüáπ", native: true },
  en: { name: "English", flag: "üá∫üá∏" },
  es: { name: "Espa√±ol", flag: "üá™üá∏" },
  fr: { name: "Fran√ßais", flag: "üá´üá∑" },
  de: { name: "Deutsch", flag: "üá©üá™" },
  it: { name: "Italiano", flag: "üáÆüáπ" },
  nl: { name: "Nederlands", flag: "üá≥üá±" },
  pl: { name: "Polski", flag: "üáµüá±" },
  ru: { name: "–†—É—Å—Å–∫–∏–π", flag: "üá∑üá∫" },
  ja: { name: "Êó•Êú¨Ë™û", flag: "üáØüáµ" },
  zh: { name: "‰∏≠Êñá", flag: "üá®üá≥" },
};

// Converter para array para uso em componentes
export const LANGUAGES_LIST = Object.entries(SUPPORTED_LANGUAGES).map(
  ([code, info]) => ({
    code,
    ...info,
  })
);

// Vari√°vel para controlar se o i18n j√° foi inicializado
let initialized = false;

/**
 * Inicializa o i18n apenas uma vez e retorna a inst√¢ncia
 */
function initI18next() {
  if (initialized) {
    return i18next;
  }

  i18next
    .use(HttpBackend) // Carrega tradu√ß√µes via http
    .use(LanguageDetector) // Detecta idioma do navegador
    .use(initReactI18next) // Passa o i18n para o react-i18next
    .init({
      ...getOptions(),
      // Configura√ß√µes espec√≠ficas para o cliente
      backend: {
        loadPath: '/locales/{{lng}}/{{ns}}.json',
      },
      // Op√ß√µes de detec√ß√£o de idioma
      detection: {
        order: ['querystring', 'cookie', 'localStorage', 'navigator'],
        lookupQuerystring: 'lang',
        lookupCookie: 'i18next',
        lookupLocalStorage: 'i18nextLng',
        caches: ['localStorage', 'cookie'],
      },
      // Gerenciamento de chaves faltantes
      saveMissing: process.env.NODE_ENV === 'development',
      missingKeyHandler: (lng, ns, key) => {
        if (process.env.NODE_ENV === 'development') {
          console.warn(`Chave de tradu√ß√£o faltando: [${lng}] ${ns}:${key}`);
        }
      },
    });

  initialized = true;
  return i18next;
}

// Inicializa e exporta a inst√¢ncia do i18n
export default initI18next();
